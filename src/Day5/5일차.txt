ex)카메라 클래스
카메라 설계도	클래스
카메라		객체(인스턴스)
사진을 찍는다	메소드
렌즈, 셔터	멤버변수

1.클래스 - 모든 속성을 가질 필요는 없다.
  접근제한자 class 클래스명 {
  	접근제한자 멤버변수; (여러개 가능)-객체변수
  	접근제한자 static 멤버변수; (여러개 가능)-클래스변수
  	접근제한자 리턴타입 메소드(매개변수); (여러개 가능)-객체메소드
            접근제한자 static 메소드; (여러개 가능)-클래스메소드
	public 클래스명()-생성자
	public 클래스명(매개변수)-생성자 오버로딩

  }
 1)멤버변수 = 객체변수 : 부품, 속성
 2)메소드 : 기능 => 객체 메소드, 클래스 메소드
  접근제한자 (static) 리턴타입 메소드명(매개변수들) {
   ex) public  static    void      main   (String[] args)
  	   구현;
  	   return 값;
     }
   ex)음료수 자판기		메소드
         돈,  메뉴		매개변수
           음료수		리턴타입
   -매개변수 : 메소드를 실행하기 위해 필요한 최소한의 정보
   -리턴타입 : 메소드 종료 후 알려주는 정보의 자료형

 3)생성자 : 멤버변수의 초기화     생성자명 => 클래스명
  //기본생성자
  public 클래스명() {

  }
  //생성자 오버로딩 
  public 클래스명(매개변수) {

  }
  -오버로딩 : 아래의 조건을 만족하면 이름이 같은 메소드나 생성자가 존재할 수 있다.
    -매개변수가 달라지는 경우
     1.매개변수의 갯수가 달라지는 경우
     2.매개변수의 타입이 달라지는 경우

 4)접근제한자
  -public : 누구나 사용 가능
   ㄱ)클래스 : 무조건 파일명과 클래스명이 같을 때
   ㄴ)멤버변수 : 주로 상수일 때
   ㄷ)메소드 : 대부분의 메소드가 public
  -private : 해당 클래스만 사용할 때, 일반적으로 클래스에 붙이지는 않는다.
   ㄱ)멤버변수 : 대부분의 멤버 변수는 private으로 사용. 메소드를 통해 연결(간접적)
   ㄴ)메소드 : 다른 클래스에서 사용하는 메소드가 아니라 내부에서 사용하는 경우
  -protected : 나+패키지+자식클래스(상속)
  -default : 나+패키지, 기본값으로 설정되어 있다.

 5)변수
   -일반변수 : 실제 사용하는 값을 저장하는 변수
   -참조변수 : 주소를 저장하는 변수 => 누군가와 연결

  -지역변수
  -멤버변수 : 객체 생성 후 사용
   멤버 메소드
    
  -클래스변수(static) : 객체 생성 없이 사용
   ex)Math.random
   클래스 메소드
    -객체 생성 없이 사용 => 클래스명.메소드명()
     ex) p1.print(); X Point.print() O
    -클래스 메소드에는 객체변수를 사용할 수 없음. 객체변수는 객체가 있어야하는데
     클래스 메소드는 객체 생성없이 사용가능하기 때문이다.
ex)클래스 : 아이폰
 -클래스 변수 : 제조사..
 -객체 변수 : 기기번호, 볼륨..

 -클래스 메소드 : 부팅 화면..
 -객체 메소드 : 배경화면 설정..

 -생성자 : 백업..

